import os
import glob
import itertools
import pandas as pd
from snakemake.utils import min_version

min_version('7.21.0')

configfile: '../config/hpcnode.yaml'

# Samples and chromosomes as list
SAMPLES = pd.read_table(config['samples'])['Sample'].tolist()
CHROMOSOMES = pd.read_table(config['chromosomes'], header=None).iloc[:,0].tolist()
HABITATS = pd.read_table(config['samples'])['Habitat'].unique().tolist()

# Reference genome
REFERENCE_GENOME = config['ref']

# External resources
GFF_FILE = config['gff']

# Paths for output files
LOG_DIR = config['log_prefix']
RAW_READ_DIR = config['raw_read_prefix']
REF_DIR = '{0}/ref'.format(config['results_prefix'])
TRIMMED_READ_DIR = '{0}/trimmed_reads'.format(config['results_prefix'])
QC_DIR = '{0}/qc'.format(config['results_prefix'])
SPECIES_ID_DIR = '{0}/species_id'.format(config['results_prefix'])
BAM_DIR = '{0}/bam'.format(config['results_prefix'])
FREEBAYES_DIR = '{0}/freebayes'.format(config['results_prefix'])
PROGRAM_RESOURCE_DIR = '{0}/program_resources'.format(config['results_prefix'])
ANGSD_DIR = '{0}/angsd'.format(config['results_prefix'])
NGSLD_DIR = '{0}/ngsld'.format(config['results_prefix'])
POP_STRUC_DIR = '{0}/population_structure'.format(config['results_prefix'])
FIGURES_DIR = config['figures']
HCN_LOCI_DIR = '{0}/hcn_loci'.format(config['results_prefix'])
GENMAP_RESULTS_DIR = '{0}/gen_map'.format(config['results_prefix'])
SWEEPS_DIR = '{0}/sweeps'.format(config['results_prefix'])
ARG_DIR = '{0}/args'.format(config['results_prefix'])
PIXY_DIR = '{0}/pixy'.format(config['results_prefix'])

# Parameters for initial PCA and relatedness analysis post-QC
LOWQUAL_SAMPLES_TO_EXCLUDE = config['lowQual_samples_to_exclude']

# List with all samples to exclude based on QC and analysis of within-population relatedness
RELATED_SAMPLES_TO_EXCLUDE = config['related_samples_to_exclude']
ALL_SAMPLES_TO_EXCLUDE = LOWQUAL_SAMPLES_TO_EXCLUDE + RELATED_SAMPLES_TO_EXCLUDE
FINAL_SAMPLES = [x for x in SAMPLES if x not in ALL_SAMPLES_TO_EXCLUDE]

# Cluster
CORES_PER_NODE = config['cluster']['cores_per_node']

# Parameters for variant calling with ANGSD
ANGSD_MAX_DP = config['angsd']['max_dp']
ANGSD_MIN_DP_IND_SFS = config['angsd']['min_dp_ind_sfs']
ANGSD_MIN_DP_IND_GL = config['angsd']['min_dp_ind_gl']

# Parameters for genotype calling with freebayes
FREEBAYES_NCHUNKS = config['freebayes']['nchunks']
FREEBAYES_CHUNKS = list(range(1, FREEBAYES_NCHUNKS + 1))

# Parameters for Admixture analysis 
NGSADMIX_K = [x for x in range(2, 11)]
NGSADMIX_SEEDS = [x for x in range(1, 11)]

# Parameters for estimating pi by habitat and Fst between habitats
HABITAT_COMBOS = ['Urban_Rural', 'Urban_Suburban', 'Rural_Suburban']

# Populations with multiple individuals for ANGSD Fst and PBS calculations
# Create list with pairwise combinations of multi-individual populations 
POPS_MULTI_IND = config['pops_multi_ind']
POP_COMB_MULTI_IND = list(itertools.combinations(POPS_MULTI_IND, 2))
POP_COMB_MULTI_IND = ['{0}_{1}'.format(x[0], x[1]) for x in POP_COMB_MULTI_IND]

wildcard_constraints:
    chrom='|'.join([x for x in CHROMOSOMES]),
    sample='|'.join([x for x in SAMPLES]),
    habitat='Urban|Suburban|Rural',
    site='4fold|0fold',
    site_type='snps|invariant',
    maf='0.05'

localrules: samtools_index_reference,
            ref_done,
            create_bam_list_highQualSamples,
            create_bam_list_allSamples,
            create_region_files_forFreebayes,
            freebayes_done,
            convert_sites_for_angsd,
            split_angsd_sites_byChrom,
            angsd_index_sites_byChrom,
            angsd_index_degenerate_sites,
            concat_angsd_gl,
            create_pos_file_for_ngsLD,
            angsd_allSamples_done,
            chloroplast_gene_fasta,
            index_chloroplast_gene_vcf,
            concat_fasta,download_nt_database,
            logfile_for_clumpak,
            angsd_index_prunedSNPs,
            pop_structure_done,
            species_id_done,
            convert_freq_forNGSrelate,
            create_bam_list_allFinalSamples,
            create_bam_list_byHabitat,
            angsd_byHabitat_done,
            extract_nt_database,
            ncbi_db_download_done,
            bcftools_split_samples,
            phasing_done,
            create_bam_lists_allFinalSamples_allSites,
            create_bam_list_byHabitat_allSites,
            vcf_filtering_done,
            makeblastdb_fromRef,
            blast_markers,
            interpolate_genetic_map,
            recombination_map_done,
            sites_toInterpolate_byChrom,
            interpolate_genetic_map,
            split_genMap,
            samples_byHabitat,
            bcftools_splitVCF_byHabitat,
            genMap_toPlinkFormat,
            norm_xpnsl,
            sweeps_done,
            angsd_thetas_allSites_readable,
            angsd_fst_allSites_readable,
            create_bam_list_byPop_multiInd,
            angsd_population_fst_readable,
            angsd_byPopulation_done,
            create_bed_from_degenotate

include: 'rules/common.smk'

rule all:
    input:
        # Reference genome
        '{0}/ref.done'.format(REF_DIR),
        # Trimming, mapping, and QC
        '{0}/multiqc/multiqc_report.html'.format(QC_DIR),
        #'{0}/species_id.done'.format(SPECIES_ID_DIR), 
        # Freebayes
        '{0}/freebayes.done'.format(FREEBAYES_DIR),
        '{0}/phasing.done'.format(FREEBAYES_DIR),
        # Recombination map
        '{0}/recombination_map.done'.format(GENMAP_RESULTS_DIR),
        # Angsd
        '{0}/angsd_allSamples.done'.format(ANGSD_DIR),
        '{0}/angsd_byHabitat.done'.format(ANGSD_DIR),
        '{0}/angsd_byPopulation.done'.format(ANGSD_DIR),
        # Population structure
        '{0}/population_structure.done'.format(POP_STRUC_DIR),
        # Sweeps
        '{0}/sweeps.done'.format(SWEEPS_DIR),
        # Args
        '{0}/args.done'.format(ARG_DIR),
        # Figures
        '{0}/figures.done'.format(FIGURES_DIR),

include: 'rules/ref.smk'
include: 'rules/trimming.smk'
include: 'rules/mapping.smk'
include: 'rules/qc.smk'
include: 'rules/species_id.smk'
include: 'rules/angsd_allSamples.smk'
include: 'rules/angsd_byHabitat.smk'
include: 'rules/angsd_byPopulation.smk'
include: 'rules/freebayes.smk'
include: 'rules/filtering.smk'
include: 'rules/recombination_map.smk'
include: 'rules/phasing.smk'
include: 'rules/population_structure.smk'
include: 'rules/sweeps.smk'
include: 'rules/args.smk'
include: 'rules/figures.smk'
