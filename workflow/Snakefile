import os
import glob
import pandas as pd
from snakemake.utils import min_version

min_version('5.26.1')

configfile: '../config/hpcnode.yaml'

# Samples and chromosomes as list
SAMPLES = pd.read_table(config['samples'])['Sample'].tolist()
CHROMOSOMES = pd.read_table(config['chromosomes'], header=None).iloc[:,0].tolist()

# Reference genome
REFERENCE_GENOME = config['files']['reference_genome']
GFF_FILE = config['files']['gff']

# Paths for output files
TMPDIR = config['temp_dir']
RAW_READ_DIR = config['raw_read_prefix']
TRIMMED_READ_DIR = '{0}/trimmed_reads'.format(config['raw_read_prefix'])
QC_DIR = '{0}/qc'.format(config['results_prefix'])
SPECIES_ID_DIR = '{0}/species_id'.format(config['results_prefix'])
BAM_DIR = '{0}/bam'.format(config['results_prefix'])
FREEBAYES_DIR = '{0}/freebayes'.format(config['results_prefix'])
PROGRAM_RESOURCE_DIR = '{0}/program_resources'.format(config['results_prefix'])
ANGSD_DIR = '{0}/angsd'.format(config['results_prefix'])
NGSLD_DIR = '{0}/ngsld'.format(config['results_prefix'])
POP_STRUC_DIR = '{0}/population_structure'.format(config['results_prefix'])
FIGURES_DIR = '{0}/figures'.format(config['results_prefix'])

# Parameters for variant calling with freebayes
SAMPLES_TO_EXCLUDE = config['samples_to_exclude']
REPRESENTATIVE_SAMPLE = config['freebayes']['sample']
NODES_PER_CHROM = config['freebayes']['nodes_per_chrom']
CORES_PER_NODE = config['freebayes']['cores_per_node']
NODES = ['node{0:0=2d}'.format(x + 1) for x in range(NODES_PER_CHROM)]
if NODES_PER_CHROM == 1:
    NUM_REGIONS_PER_CHROM = CORES_PER_NODE
elif NODES_PER_CHROM > 1:
    NUM_REGIONS_PER_CHROM = NODES_PER_CHROM * CORES_PER_NODE

# Parameters for Admixture analysis 
NGSADMIX_K = [x for x in range(1, 11)]
NGSADMIX_SEEDS = [x for x in range(1, 11)]

wildcard_constraints:
    chrom='|'.join([x for x in CHROMOSOMES])

localrules: create_tmp_dir, create_bam_list_varCall, create_bam_list_forSpeciesID, region_files_forFreebayes, freebayes_done, concat_angsd_stats, create_pos_file_for_ngsLD, concat_sfs, sum_sfs, convert_sites_for_angsd, split_angsd_sites_byChrom, angsd_index_sites, files_for_angsd_site_subset, subset_angsd_gl, subset_angsd_maf, extract_sample_angsd, extract_angsd_allSites, angsd_done, chloroplast_gene_fasta, index_chloroplast_gene_vcf, concat_fasta, pop_structure_done

include: 'rules/common.smk'

#raw_read_dict = create_raw_read_dict(RAW_READ_DIR, SAMPLES)

rule all:
   input:
        # Trimming, mapping, and QC
        '{0}/multiqc/multiqc_report.html'.format(QC_DIR),
        #'{0}/species_id.done'.format(SPECIES_ID_DIR), 
        # Freebayes
        #'{0}/freebayes.done'.format(FREEBAYES_DIR),
        # Angsd
        '{0}/angsd.done'.format(ANGSD_DIR),
        # Population structure
        '{0}/population_structure.done'.format(POP_STRUC_DIR),
        # Param tests
        # expand('{0}/test_params/GL{{GL}}_baq{{baq}}/CM019112.1_allSamples_allSites_GL{{GL}}_baq{{baq}}.saf.{{ext}}'.format(ANGSD_DIR), chrom=CHROMOSOMES, ext=['gz','idx','pos.gz'], GL=['1','2'], baq=['0','1','2'])
        # NGSLD
        #expand('{0}/pruned/{{chrom}}/{{chrom}}_withMaf{{maf}}_pruned.id'.format(NGSLD_DIR), chrom=CHROMOSOMES, maf=['0.05']),

rule create_tmp_dir:
    output: directory(TMPDIR)
    shell: 'mkdir {output}'

include: 'rules/ref.smk'
include: 'rules/trimming.smk'
include: 'rules/mapping.smk'
include: 'rules/qc.smk'
include: 'rules/species_id.smk'
include: 'rules/freebayes.smk'
include: 'rules/param_tests.smk'
include: 'rules/angsd.smk'
include: 'rules/population_structure.smk'

rule clean:
    params:
        'logs {0} {1}/* {2} fastp.json'.format(config['results_prefix'], TRIMMED_READ_DIR, TMPDIR)
    shell:
        'rm -rfv {params}'
